{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":""},{"location":"#pipelex-n8n-community-node","title":"Pipelex n8n Community Node","text":"<p>Execute Pipelex AI pipelines directly in your n8n workflows.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>\u26a0\ufe0f Important: You must understand Pipelex before using this node!</p> <ul> <li>\ud83d\udcda Read the Pipelex Documentation first</li> <li>\ud83d\ude80 Try the Quick Start Guide</li> <li>\ud83c\udf73 Explore the Cookbook Examples</li> </ul>"},{"location":"#what-youll-need","title":"What You'll Need","text":"<ol> <li>A running Pipelex API server</li> <li>Public Pipelex API: (Coming Soon, join the waitlist here)</li> <li>Self-hosted: Pipelex API Docker Image</li> </ol>"},{"location":"#installation","title":"Installation","text":"<p>Here is some n8n documentation about installing community nodes.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<ol> <li>Set up Pipelex API (more information here):    <pre><code>docker run -p 8081:8081 \\\n  -e API_KEY=your-token-here \\\n  -e PIPELEX_INFERENCE_API_KEY=your-key-here \\\n  pipelex/pipelex-api\n</code></pre></li> </ol> <p>Get a free PIPELEX_INFERENCE_API_KEY ($20 free credits) in the Discord # \ud83d\udd11\u30fbfree-api-key channel or by filling this form.</p> <ol> <li>Add credentials in n8n:</li> <li>Node \u2192 Credential to connect with \u2192 Create New</li> <li> <p>Enter your API Bearer Token</p> </li> <li> <p>Configure the node:</p> </li> <li>Base URL: Your Pipelex API server URL, e.g. <code>http://localhost:8081</code> or <code>http://host.docker.internal:8081</code> (local Docker)</li> <li>Inputs: Your pipeline inputs as JSON</li> <li> <p>Either provide Pipe Code OR Pipelex Bundle</p> </li> <li> <p>Copy paste an example from the Examples page</p> </li> </ol>"},{"location":"#learn-more-on-usage","title":"Learn more on usage","text":"<p>See Usage Guide for detailed parameter descriptions and examples.</p>"},{"location":"#examples","title":"Examples","text":"<p>See Examples for real-world workflow examples.</p>"},{"location":"#need-help","title":"Need Help?","text":"<ul> <li>\ud83d\udcac Discord Community</li> <li>\ud83d\udcd6 Main Documentation</li> <li>\ud83d\udc1b Report Issues</li> </ul>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#pipelex-n8n-node-examples","title":"Pipelex n8n Node Examples","text":"<p>This page provides real-world examples of using the Pipelex n8n node in workflows.</p>"},{"location":"examples/#example-1-cv-job-matching-interview-question-generation","title":"Example 1: CV-Job Matching &amp; Interview Question Generation","text":"<p>Use Case: Automatically analyze how well a candidate's CV matches a job offer and generate relevant interview questions.</p>"},{"location":"examples/#overview","title":"Overview","text":"<p>This pipeline: 1. Extracts text from a CV PDF 2. Analyzes alignment between CV and job requirements 3. Generates targeted interview questions based on gaps and strengths 4. Compiles everything into a comprehensive interview preparation document</p>"},{"location":"examples/#node-configuration","title":"Node Configuration","text":""},{"location":"examples/#base-url","title":"Base URL","text":"<pre><code>http://localhost:8081\n</code></pre> (or your Pipelex API server URL)"},{"location":"examples/#pipe-code","title":"Pipe Code","text":"<p>Leave empty (we'll use inline PLX content)</p>"},{"location":"examples/#pipelex-bundle-plx_content","title":"Pipelex Bundle (plx_content)","text":"Click to expand full PLX pipeline definition <pre><code>domain = \"cv_job_matching\"\ndescription = \"Analyzing CV-job offer alignment and generating interview questions\"\nmain_pipe = \"analyze_cv_job_match_and_questions\"\n\n[concept.MatchAnalysis]\ndescription = \"Structured evaluation of how well a candidate's CV aligns with a job offer.\"\n\n[concept.MatchAnalysis.structure]\noverall_match_score = { type = \"number\", description = \"Numerical score representing overall fit between candidate and job (0-100)\", required = true }\nqualifications_alignment = { type = \"text\", description = \"Assessment of how candidate's education and certifications match job requirements\", required = true }\nexperience_alignment = { type = \"text\", description = \"Evaluation of how candidate's work history aligns with required experience\", required = true }\nskills_match = { type = \"text\", description = \"Analysis of technical and soft skills match between CV and job requirements\", required = true }\nidentified_gaps = { type = \"text\", description = \"List of requirements from job offer not clearly met by candidate's CV\", required = true }\nstrengths = { type = \"text\", description = \"Key strengths and advantages the candidate brings relative to the position\", required = true }\n\n[concept.InterviewQuestion]\ndescription = \"A single question to be asked during an interview.\"\n\n[concept.InterviewQuestion.structure]\nquestion_text = { type = \"text\", description = \"The actual question to ask the candidate\", required = true }\npurpose = { type = \"text\", description = \"Why this question is being asked (e.g., verify skill, explore gap, assess cultural fit)\", required = true }\ncategory = { type = \"text\", description = \"Type of question (e.g., technical, behavioral, experience-based, gap-exploration)\", required = true }\n\n[concept.InterviewPreparation]\ndescription = \"Complete document containing match analysis and recommended interview questions.\"\nrefines = \"Text\"\n\n[pipe.analyze_cv_job_match_and_questions]\ntype = \"PipeSequence\"\ndescription = \"\"\"\nMain pipeline that orchestrates the complete CV-job matching analysis and interview preparation workflow. Takes a CV PDF file and job offer text as inputs, extracts text from the CV, performs comprehensive match analysis, generates targeted interview questions, and compiles everything into a final interview preparation document. This is the entry point for the entire pipeline.\n\"\"\"\ninputs = { cv_pdf = \"PDF\", job_offer_text = \"Text\" }\noutput = \"InterviewPreparation\"\nsteps = [\n    { pipe = \"extract_cv_text\", result = \"cv_pages\" },\n    { pipe = \"analyze_match\", result = \"match_analysis\" },\n    { pipe = \"generate_interview_questions\", result = \"interview_questions\" },\n    { pipe = \"compile_results\", result = \"interview_preparation\" },\n]\n\n[pipe.extract_cv_text]\ntype = \"PipeExtract\"\ndescription = \"\"\"\nExtracts text content from the CV PDF document, converting it into a list of pages that can be analyzed. This pipe processes the PDF file and outputs structured page content with text extracted from each page of the CV.\n\"\"\"\ninputs = { cv_pdf = \"PDF\" }\noutput = \"Page[]\"\nmodel = \"extract_text_from_pdf\"\n\n[pipe.analyze_match]\ntype = \"PipeLLM\"\ndescription = \"\"\"\nAnalyzes the match between the candidate's CV and the job offer by evaluating qualifications alignment, experience alignment, skills match, and identifying gaps. Produces a structured MatchAnalysis object with an overall match score (0-100), detailed assessments of how the candidate's education, certifications, work history, and skills align with job requirements, identified gaps where requirements are not clearly met, and key strengths the candidate brings to the position.\n\"\"\"\ninputs = { cv_pages = \"Page[]\", job_offer_text = \"Text\" }\noutput = \"MatchAnalysis\"\nmodel = \"llm_to_answer_hard_questions\"\nsystem_prompt = \"\"\"\nYou are an expert HR analyst and recruiter specializing in candidate evaluation. Your task is to produce a structured MatchAnalysis that comprehensively evaluates how well a candidate's CV aligns with a job offer.\n\"\"\"\nprompt = \"\"\"\nAnalyze how well the candidate's CV matches the job offer requirements.\n\n@cv_pages\n\n@job_offer_text\n\nPerform a comprehensive evaluation covering:\n- Overall match score (0-100)\n- How qualifications (education, certifications) align with requirements\n- How work experience aligns with required experience\n- Technical and soft skills match\n- Gaps where requirements are not clearly met\n- Key strengths the candidate brings\n\nBe thorough and objective in your assessment.\n\"\"\"\n\n[pipe.generate_interview_questions]\ntype = \"PipeLLM\"\ndescription = \"\"\"\nGenerates a comprehensive list of relevant interview questions based on the match analysis and job offer. Questions are designed to explore identified gaps, verify claimed strengths and skills, assess experience depth, and clarify areas requiring further investigation. Each question includes the question text, its purpose, and category (technical, behavioral, experience-based, or gap-exploration).\n\"\"\"\ninputs = { match_analysis = \"MatchAnalysis\", job_offer_text = \"Text\" }\noutput = \"InterviewQuestion[]\"\nmodel = \"llm_to_write_questions\"\nsystem_prompt = \"\"\"\nYou are an expert HR professional and interviewer. Your task is to generate structured InterviewQuestion objects based on the match analysis and job requirements.\n\"\"\"\nprompt = \"\"\"\nBased on the match analysis and job offer, generate a comprehensive list of interview questions.\n\n@match_analysis\n\n@job_offer_text\n\nGenerate interview questions that:\n- Explore identified gaps and missing qualifications\n- Verify claimed strengths and skills from the CV\n- Assess depth of relevant experience\n- Clarify areas requiring further investigation\n- Include a mix of technical, behavioral, experience-based, and gap-exploration questions\n\nEnsure each question is purposeful and directly tied to evaluating the candidate's fit for this specific role.\n\"\"\"\n\n[pipe.compile_results]\ntype = \"PipeLLM\"\ndescription = \"\"\"\nCompiles the match analysis and generated interview questions into a final comprehensive interview preparation document. This document provides a complete overview for interviewers, combining the structured match analysis with the recommended questions to facilitate an effective interview process.\n\"\"\"\ninputs = { match_analysis = \"MatchAnalysis\", interview_questions = \"InterviewQuestion[]\" }\noutput = \"InterviewPreparation\"\nmodel = \"llm_to_answer_easy_questions\"\nsystem_prompt = \"\"\"\nYou are compiling a comprehensive interview preparation document. Your task is to synthesize the match analysis and interview questions into a well-structured, professional document that will guide interviewers through an effective interview process.\n\"\"\"\nprompt = \"\"\"\nCreate a comprehensive interview preparation document that combines the following match analysis and interview questions.\n\n@match_analysis\n\n@interview_questions\n\nCompile these elements into a cohesive interview preparation document that provides interviewers with a complete overview of the candidate's fit and the recommended questions to explore during the interview.\n\"\"\"\n</code></pre>"},{"location":"examples/#inputs","title":"Inputs","text":"<pre><code>{\n  \"cv_pdf\": {\n    \"concept\": \"native.PDF\",\n    \"content\": {\n      \"url\": \"https://upload.wikimedia.org/wikipedia/commons/c/cc/Resume.pdf\"\n    }\n  },\n  \"job_offer_text\": {\n    \"concept\": \"native.Text\",\n    \"content\": \"GenAI Engineer - Pipelex (Paris)\\n\\nWe're growing our team of AI engineers in Paris, to build our Agentic Knowledge Framework.\\n\\n[Full job description: https://pipelex.notion.site/genai-engineer-job-startup-paris]\\n\\nKey requirements:\\n- Strong Python skills\\n- Experience with LLMs and AI frameworks\\n- Ability to ship fast and iterate\\n- Knowledge of software architecture\\n- Passion for building developer tools\\n\\n...\"\n  }\n}\n</code></pre> <p>Here is the full job offer link.</p>"},{"location":"examples/#output-name","title":"Output Name","text":"<p>Leave empty (we'll use the default output name)</p>"},{"location":"examples/#output-multiplicity","title":"Output Multiplicity","text":"<p>Leave empty</p>"},{"location":"examples/#screenshot-node-configuration","title":"Screenshot: Node Configuration","text":"<p>Here's what the configured Pipelex node looks like in n8n:</p> <p></p> <p>The screenshot shows: - Credential: Pipelex Bearer Token account selected - Base URL: <code>http://127.0.0.1:8081</code> (local API server) - Pipelex Bundle: Full pipeline definition in the text area - Inputs: JSON object with <code>cv_pdf</code> and <code>job_offer_text</code> properly formatted - Output: Successful execution showing the interview preparation document</p>"},{"location":"examples/#expected-output","title":"Expected Output","text":"<p>The pipeline returns an <code>InterviewPreparation</code> document containing:</p> <pre><code>{\n  \"interview_preparation\": {\n    \"concept\": \"cv_job_matching.InterviewPreparation\",\n    \"content\": {\n      \"text\": \"INTERVIEW PREPARATION DOCUMENT\\n\\n=== MATCH ANALYSIS ===\\n\\nOverall Match Score: 78/100\\n\\nQualifications Alignment:\\n- Strong computer science background...\\n\\nExperience Alignment:\\n- 5 years of software development experience...\\n\\nSkills Match:\\n- Python: Excellent match\\n- LLM frameworks: Demonstrated experience...\\n\\nIdentified Gaps:\\n- Limited mention of specific AI agent architectures\\n- No explicit mention of Paris location preference\\n\\nStrengths:\\n- Strong technical foundation in Python and ML\\n- Proven track record of shipping products...\\n\\n=== RECOMMENDED INTERVIEW QUESTIONS ===\\n\\n1. [Technical] Can you describe your experience building production LLM systems?\\n   Purpose: Verify claimed LLM experience\\n   Category: technical\\n\\n2. [Behavioral] Tell us about a time you had to ship a feature quickly. How did you balance speed with quality?\\n   Purpose: Assess alignment with 'ship, ship, ship' value\\n   Category: behavioral\\n\\n3. [Gap Exploration] We see you have strong Python experience, but could you elaborate on your exposure to AI agent architectures?\\n   Purpose: Explore identified gap in agent architecture knowledge\\n   Category: gap-exploration\\n\\n...\"\n    }\n  }\n}\n</code></pre>"},{"location":"examples/#processing-the-results","title":"Processing the Results","text":"<p>After the Pipelex node, you can:</p> <ol> <li> <p>Send to HR team: </p><pre><code>Pipelex \u2192 Email node (send interview doc to hiring manager)\n</code></pre><p></p> </li> <li> <p>Store in database: </p><pre><code>Pipelex \u2192 Set node (extract fields) \u2192 Database node (save)\n</code></pre><p></p> </li> <li> <p>Send an email  You would need to templatise the email using a <code>PipeCompose</code>. Look at Example #2 for a more detailed example.</p> </li> </ol>"},{"location":"examples/#example-2-interview-feedback-consolidation","title":"Example 2: Interview Feedback Consolidation","text":"<p>Use Case: Consolidate multiple interview feedback emails into a single structured HR report with ratings, red flags, and recommendations.</p>"},{"location":"examples/#overview_1","title":"Overview","text":"<p>This pipeline: 1. Processes multiple interview feedback emails from different interviewers 2. Evaluates feedback against HR criteria and identifies red flags 3. Generates structured ratings and recommendations 4. Formats everything into a professional HR feedback form</p>"},{"location":"examples/#node-configuration_1","title":"Node Configuration","text":""},{"location":"examples/#base-url_1","title":"Base URL","text":"<pre><code>http://localhost:8081\n</code></pre>"},{"location":"examples/#pipe-code_1","title":"Pipe Code","text":"<pre><code>process_interview_feedback\n</code></pre> (or leave empty to use inline PLX content)"},{"location":"examples/#pipelex-bundle-plx_content_1","title":"Pipelex Bundle (plx_content)","text":"Click to expand full PLX pipeline definition <pre><code>domain = \"interview_feedback\"\ndescription = \"Process multiple interview feedback emails and generate a consolidated HR feedback form\"\n\n[concept]\nInterviewFeedbackEmail = \"An email containing feedback from an interviewer about a candidate\"\nHRCriteria = \"HR requirements and red flags to evaluate candidates against\"\n\n[concept.ConsolidatedFeedback]\ndescription = \"Structured feedback form consolidating all interviewer inputs\"\n\n[concept.ConsolidatedFeedback.structure]\ncandidate_name = \"The name of the candidate\"\nposition = \"The position the candidate is interviewing for\"\ninterview_date = { type = \"date\", description = \"Date of the interview process\" }\noverall_recommendation = { type = \"text\", description = \"Overall hiring recommendation: Strongly Recommend, Recommend, Neutral, Do Not Recommend\", choices = [\"Strongly Recommend\", \"Recommend\", \"Neutral\", \"Do Not Recommend\"] }\ntechnical_skills_rating = { type = \"integer\", description = \"Technical skills rating from 1-5\" }\ncommunication_skills_rating = { type = \"integer\", description = \"Communication skills rating from 1-5\" }\ncultural_fit_rating = { type = \"integer\", description = \"Cultural fit rating from 1-5\" }\nstrengths = { type = \"list\", item_type = \"text\", description = \"List of candidate strengths identified across all interviews\" }\nweaknesses = { type = \"list\", item_type = \"text\", description = \"List of candidate weaknesses identified across all interviews\" }\nred_flags = { type = \"list\", item_type = \"text\", description = \"List of red flags identified based on HR criteria\", required = false }\ninterviewer_consensus = \"Summary of consensus or disagreements among interviewers\"\nkey_feedback_points = { type = \"list\", item_type = \"text\", description = \"Key feedback points from all interviewers\" }\nnext_steps = \"Recommended next steps in the hiring process\"\nadditional_notes = { type = \"text\", description = \"Any additional notes or context\", required = false }\n\n[pipe]\n[pipe.process_interview_feedback]\ntype = \"PipeSequence\"\ndescription = \"Main pipeline to process interview feedback emails and generate formatted HR form\"\ninputs = { feedback_emails = \"InterviewFeedbackEmail[]\", hr_criteria = \"HRCriteria\" }\noutput = \"Text\"\nsteps = [\n    { pipe = \"consolidate_interview_feedback\", result = \"consolidated_feedback\" },\n    { pipe = \"format_feedback_form\", result = \"formatted_form\" }\n]\n\n[pipe.consolidate_interview_feedback]\ntype = \"PipeLLM\"\ndescription = \"Consolidate multiple interview feedback emails and evaluate against HR criteria\"\ninputs = { feedback_emails = \"InterviewFeedbackEmail[]\", hr_criteria = \"HRCriteria\" }\noutput = \"ConsolidatedFeedback\"\nmodel = { model = \"base-claude\", temperature = 0.3, max_tokens = \"auto\" }\nprompt = \"\"\"\nYou are an HR professional tasked with consolidating multiple interview feedback emails for a candidate.\n\nYour goal is to:\n1. Extract key information from all interviewer feedbacks\n2. Identify common themes, strengths, and weaknesses\n3. Check for red flags based on the HR criteria provided\n4. Provide a clear overall recommendation\n5. Rate the candidate on technical skills, communication, and cultural fit\n\nHR Criteria and Red Flags to consider:\n\n@hr_criteria\n\nInterview Feedback Emails:\n\n@feedback_emails\n\nPlease analyze all the feedback carefully and create a comprehensive consolidated feedback form.\nEnsure you identify any red flags that match the HR criteria.\nProvide balanced ratings and clear next steps.\n\"\"\"\n\n[pipe.format_feedback_form]\ntype = \"PipeCompose\"\ndescription = \"Format the consolidated feedback into a professional HR feedback form\"\ninputs = { consolidated_feedback = \"ConsolidatedFeedback\" }\noutput = \"Text\"\ntemplate = \"\"\"\n================================================================================\n                        INTERVIEW FEEDBACK REPORT\n================================================================================\n\nCANDIDATE INFORMATION\n---------------------\nCandidate:        $consolidated_feedback.candidate_name\nPosition:         $consolidated_feedback.position\nInterview Date:   $consolidated_feedback.interview_date\n\n================================================================================\nOVERALL RECOMMENDATION\n================================================================================\n\n$consolidated_feedback.overall_recommendation\n\n================================================================================\nRATINGS\n================================================================================\n\nTechnical Skills:      $consolidated_feedback.technical_skills_rating/5\nCommunication Skills:  $consolidated_feedback.communication_skills_rating/5\nCultural Fit:          $consolidated_feedback.cultural_fit_rating/5\n\n================================================================================\nSTRENGTHS\n================================================================================\n\n{% for strength in consolidated_feedback.strengths -%}\n\u2022 {{ strength }}\n{% endfor %}\n\n================================================================================\nWEAKNESSES\n================================================================================\n\n{% for weakness in consolidated_feedback.weaknesses -%}\n\u2022 {{ weakness }}\n{% endfor %}\n\n{% if consolidated_feedback.red_flags -%}\n================================================================================\n\u26a0\ufe0f  RED FLAGS\n================================================================================\n\n{% for flag in consolidated_feedback.red_flags -%}\n\u26a0\ufe0f  {{ flag }}\n{% endfor %}\n\n{% endif -%}\n================================================================================\nKEY FEEDBACK POINTS\n================================================================================\n\n{% for point in consolidated_feedback.key_feedback_points -%}\n\u2022 {{ point }}\n{% endfor %}\n\n================================================================================\nINTERVIEWER CONSENSUS\n================================================================================\n\n$consolidated_feedback.interviewer_consensus\n\n================================================================================\nNEXT STEPS\n================================================================================\n\n$consolidated_feedback.next_steps\n\n{% if consolidated_feedback.additional_notes -%}\n================================================================================\nADDITIONAL NOTES\n================================================================================\n\n$consolidated_feedback.additional_notes\n\n{% endif -%}\n================================================================================\nConfidential - HR Internal Use Only\n================================================================================\n\"\"\"\n</code></pre>"},{"location":"examples/#inputs_1","title":"Inputs","text":"<pre><code>{\n  \"feedback_emails\": [\n    \"From: John Smith, Technical Lead\\nDate: January 15, 2025\\nSubject: Interview Feedback - Sarah Johnson - Senior Software Engineer\\n\\nI had the pleasure of interviewing Sarah Johnson for the Senior Software Engineer position.\\n\\nTechnical Skills: Sarah demonstrated excellent knowledge of Python and distributed systems. She quickly solved the coding challenge and explained her approach clearly. Her understanding of system design patterns was impressive.\\n\\nCommunication: Very clear communicator. Articulated her thoughts well and asked insightful questions about our tech stack.\\n\\nCultural Fit: Seems like a great team player. She emphasized collaboration and mentioned enjoying mentoring junior developers.\\n\\nConcerns: None significant. She mentioned she's interviewing with other companies and expects to decide within 2 weeks.\\n\\nRecommendation: Strong hire\",\n\n    \"From: Maria Garcia, Product Manager\\nDate: January 15, 2025\\nSubject: Re: Sarah Johnson Interview\\n\\nHi HR Team,\\n\\nI met with Sarah to discuss product collaboration and her experience working with PMs.\\n\\nStrengths:\\n- Great at understanding product requirements\\n- Proactive in suggesting technical solutions\\n- Experience working in agile environments\\n\\nAreas of concern:\\n- She mentioned some frustration with her current company's management style\\n- Seemed eager to leave quickly - mentioned a 1-week notice period\\n\\nOverall: I think she'd be a good fit, but we should understand better why she's leaving so quickly.\\n\\nRecommendation: Recommend with some reservations\",\n\n    \"From: David Chen, Engineering Manager\\nDate: January 16, 2025\\nSubject: Interview Feedback - Sarah Johnson\\n\\nTeam,\\n\\nI conducted the behavioral interview with Sarah.\\n\\nStrong points:\\n- 8 years of relevant experience\\n- Led several successful projects\\n- Good problem-solving examples\\n- References check out positively\\n\\nRed flags:\\n- When asked about conflicts, she spoke negatively about her current manager\\n- Mentioned salary expectations that are 40% above our range\\n- Seemed distracted during the interview, checked her phone twice\\n\\nCultural fit: Mixed signals. She talks about teamwork but her examples focused heavily on individual contributions.\\n\\nDecision: I'm on the fence. The technical skills are there, but the attitude concerns me.\"\n  ],\n  \"hr_criteria\": \"HR Evaluation Criteria:\\n\\nRED FLAGS TO WATCH FOR:\\n- Negative talk about previous employers or managers\\n- Unrealistic salary expectations (&gt;20% above budget)\\n- Short tenure at previous companies (&lt; 1 year)\\n- Unprofessional behavior during interviews\\n- Eagerness to leave current position without proper notice\\n- Inconsistent information across interviews\\n\\nPOSITIVE INDICATORS:\\n- Strong technical skills matching job requirements\\n- Good cultural fit with team values\\n- Professional communication\\n- Collaborative mindset\\n- Reasonable salary expectations\\n- Proper notice period at current employer\\n\\nSALARY BUDGET: $120,000 - $145,000\\nPOSITION: Senior Software Engineer\\nREQUIRED SKILLS: Python, Distributed Systems, Team Leadership\"\n}\n</code></pre> <p>\ud83d\udca1 Tip: In a real n8n workflow, you could fetch these emails from Gmail/Outlook using their respective nodes, or from a database where feedback forms are stored.</p>"},{"location":"examples/#output-name_1","title":"Output Name","text":"<p>Leave empty (uses default <code>formatted_form</code>)</p>"},{"location":"examples/#output-multiplicity_1","title":"Output Multiplicity","text":"<p>Leave empty (single document output)</p>"},{"location":"examples/#screenshot-node-configuration_1","title":"Screenshot: Node Configuration","text":"<p>Here's what the configured Pipelex node looks like in n8n:</p> <p></p> <p>The screenshot shows: - Credential: Pipelex Bearer Token account configured - Base URL: <code>http://127.0.0.1:8081</code> (local API server) - Pipe Code: <code>process_interview_feedback</code> (using pre-registered pipeline) - Inputs: JSON array with three feedback emails and HR criteria - Output: Successfully formatted HR interview feedback report</p>"},{"location":"examples/#expected-output_1","title":"Expected Output","text":"<pre><code>================================================================================\n                        INTERVIEW FEEDBACK REPORT\n================================================================================\n\nCANDIDATE INFORMATION\n---------------------\nCandidate:        Sarah Johnson\nPosition:         Senior Software Engineer\nInterview Date:   2025-01-15 00:00:00\n\n================================================================================\nOVERALL RECOMMENDATION\n================================================================================\n\nNeutral\n\n================================================================================\nRATINGS\n================================================================================\n\nTechnical Skills:      5/5\nCommunication Skills:  4/5\nCultural Fit:          2/5\n\n================================================================================\nSTRENGTHS\n================================================================================\n\n\u2022 Excellent knowledge of Python and distributed systems\n\u2022 Strong system design understanding\n\u2022 Clear communicator and articulates thoughts well\n\u2022 8 years of relevant experience\n\u2022 Led several successful projects\n\u2022 Good at understanding product requirements\n\u2022 Proactive in suggesting technical solutions\n\u2022 Experience mentoring junior developers\n\u2022 Positive references\n\n\n================================================================================\nWEAKNESSES\n================================================================================\n\n\u2022 Expressed frustration with current company's management\n\u2022 Examples focused heavily on individual contributions rather than teamwork\n\u2022 Appeared distracted during interview (checked phone twice)\n\u2022 Eager to leave current position quickly\n\n\n================================================================================\n\u26a0\ufe0f  RED FLAGS\n================================================================================\n\n\u26a0\ufe0f  Negative talk about current manager when discussing conflicts\n\u26a0\ufe0f  Unrealistic salary expectations - 40% above budget range ($120k-$145k)\n\u26a0\ufe0f  Eagerness to leave current position with only 1-week notice period\n\u26a0\ufe0f  Unprofessional behavior - checked phone twice during interview\n\n\n================================================================================\nKEY FEEDBACK POINTS\n================================================================================\n\n\u2022 Demonstrated excellent technical skills in Python and distributed systems\n\u2022 Solved coding challenge quickly with clear explanations\n\u2022 Strong understanding of product requirements and agile environments\n\u2022 Mentioned frustration with current management style\n\u2022 Spoke negatively about current manager during behavioral interview\n\u2022 Salary expectations are 40% above the budgeted range\n\u2022 Willing to provide only 1-week notice to current employer\n\u2022 Checked phone twice during interview showing lack of focus\n\u2022 Interviewing with other companies with 2-week decision timeline\n\u2022 Mixed signals on cultural fit - talks about teamwork but examples show individual focus\n\n\n================================================================================\nINTERVIEWER CONSENSUS\n================================================================================\n\nSignificant disagreement among interviewers. Technical Lead (John Smith) gave strong positive recommendation with no concerns. Product Manager (Maria Garcia) recommended with reservations about quick departure timeline. Engineering Manager (David Chen) is on the fence due to attitude and professionalism concerns despite strong technical skills. All agree on technical competence, but behavioral and cultural fit assessments vary considerably.\n\n================================================================================\nNEXT STEPS\n================================================================================\n\nSchedule follow-up conversation with HR to address red flags: 1) Clarify salary expectations and discuss budget constraints ($120k-$145k range), 2) Understand reasons for leaving current position and negative comments about management, 3) Discuss appropriate notice period expectations, 4) Assess cultural fit more thoroughly regarding teamwork vs individual contribution preferences. If candidate can address these concerns satisfactorily, consider moving forward with reference checks focused on professionalism and teamwork. Otherwise, recommend not proceeding with offer.\n\n================================================================================\nADDITIONAL NOTES\n================================================================================\n\nWhile Sarah demonstrates strong technical capabilities that match job requirements, multiple red flags align with HR criteria that warrant serious consideration. The combination of unrealistic salary expectations (significantly exceeding budget), negative talk about current management, inadequate notice period, and unprofessional interview behavior present substantial concerns. The discrepancy between stated collaborative values and actual examples of individual-focused work also raises questions about cultural alignment. Decision timeline is tight (2 weeks) due to other opportunities candidate is pursuing.\n\n================================================================================\nConfidential - HR Internal Use Only\n====================================================\n</code></pre>"},{"location":"examples/#processing-the-results_1","title":"Processing the Results","text":"<p>Workflow options:</p> <ol> <li> <p>Email to hiring committee: </p><pre><code>Pipelex \u2192 Email node \u2192 Send to HR team + hiring managers\n</code></pre><p></p> </li> <li> <p>Store in HR system: </p><pre><code>Pipelex \u2192 Parse JSON \u2192 Database node \u2192 Store in candidate records\n</code></pre><p></p> </li> <li> <p>Notify on Slack: </p><pre><code>Pipelex \u2192 Slack node \u2192 Post summary in #hiring-decisions channel\n</code></pre><p></p> </li> <li> <p>Generate PDF report: </p><pre><code>Pipelex \u2192 HTTP Request node (HTML to PDF API) \u2192 Save to Google Drive\n</code></pre><p></p> </li> </ol>"},{"location":"examples/#more-examples-coming-soon","title":"More Examples Coming Soon","text":"<ul> <li>Document extraction and classification</li> <li>Batch invoice processing</li> <li>Content generation with multiple variations</li> <li>Real-time data enrichment</li> </ul> <p>For more pipeline examples, visit the Pipelex Cookbook.</p>"},{"location":"usage/","title":"Usage Guide","text":""},{"location":"usage/#usage-guide","title":"Usage Guide","text":""},{"location":"usage/#node-parameters","title":"Node Parameters","text":""},{"location":"usage/#base-url","title":"Base URL","text":"<p>The URL of your Pipelex API server.</p> <p>Examples:</p> <ul> <li>Local Docker: <code>http://localhost:8081</code> or <code>http://host.docker.internal:8081</code></li> <li>Remote server: <code>https://api.yourserver.com</code></li> <li>Public Pipelex API: (Coming Soon, join the waitlist here)</li> </ul>"},{"location":"usage/#understanding-pipe_code-and-plx_content","title":"Understanding <code>pipe_code</code> and <code>plx_content</code>","text":"<p>The Pipelex node offers flexibility in how you define and execute pipelines. You can either reference a pre-registered pipeline, provide inline PLX code, or combine both approaches.</p>"},{"location":"usage/#case-1-only-pipe_code-pipeline-library","title":"Case 1: Only <code>pipe_code</code> (Pipeline Library)","text":"<p>Use this when your pipeline is already registered in your Pipelex API server's library.</p> <p>n8n Node Configuration: - Pipe Code: <code>invoice_extractor</code> - Pipelex Bundle: (leave empty) - Inputs: <code>{ \"invoice_text\": \"...\" }</code></p> <p>What happens: The API will look for a pipeline named <code>invoice_extractor</code> in your server's library and execute it.</p> <p>API Request: </p><pre><code>{\n  \"pipe_code\": \"invoice_extractor\",\n  \"inputs\": {\n    \"invoice_text\": \"INVOICE #123...\"\n  }\n}\n</code></pre><p></p> <p>Use this when: - You have pipelines uploaded to your server - You want to reuse the same pipeline across multiple workflows - You prefer centralized pipeline management</p>"},{"location":"usage/#case-2-only-plx_content-inline-pipeline","title":"Case 2: Only <code>plx_content</code> (Inline Pipeline)","text":"<p>Use this when you want to define the pipeline directly in the n8n node.</p> <p>n8n Node Configuration: - Pipe Code: (leave empty) - Pipelex Bundle: </p><pre><code>domain = \"invoice_processing\"\nmain_pipe = \"extract_invoice\"\n\n[concept]\nInvoiceText = \"Raw invoice text\"\nInvoiceData = \"Structured invoice data\"\n\n[pipe.extract_invoice]\ntype = \"PipeLLM\"\ninputs = { text = \"InvoiceText\" }\noutput = \"InvoiceData\"\nmodel = \"llm_to_extract_info\"\nprompt = \"\"\"\nExtract structured data from:\n@text\n\"\"\"\n</code></pre> - Inputs: <code>{ \"text\": \"...\" }</code><p></p> <p>What happens: The API will parse your inline PLX code and execute the pipeline specified in <code>main_pipe</code>.</p> <p>API Request: </p><pre><code>{\n  \"plx_content\": \"domain = \\\"invoice_processing\\\"\\nmain_pipe = \\\"extract_invoice\\\"...\",\n  \"inputs\": {\n    \"text\": \"INVOICE #123...\"\n  }\n}\n</code></pre><p></p> <p>Important: You must specify <code>main_pipe</code> in your PLX content when not providing a <code>pipe_code</code>.</p> <p>Use this when: - You're prototyping or testing pipelines - You want the pipeline definition visible in n8n - You don't have access to upload to the server library</p>"},{"location":"usage/#case-3-both-pipe_code-and-plx_content-inline-with-specific-pipe","title":"Case 3: Both <code>pipe_code</code> AND <code>plx_content</code> (Inline with Specific Pipe)","text":"<p>Use this when you have multiple pipes in your inline PLX code and want to execute a specific one.</p> <p>n8n Node Configuration: - Pipe Code: <code>extract_invoice</code> - Pipelex Bundle: </p><pre><code>domain = \"document_processing\"\nmain_pipe = \"analyze_document\"\n\n[concept]\nDocumentText = \"Raw document text\"\nInvoiceData = \"Structured invoice data\"\nAnalysisResult = \"Document analysis\"\n\n[pipe.extract_invoice]\ntype = \"PipeLLM\"\ninputs = { text = \"DocumentText\" }\noutput = \"InvoiceData\"\nmodel = \"llm_to_extract_info\"\nprompt = \"Extract invoice data from: @text\"\n\n[pipe.analyze_document]\ntype = \"PipeLLM\"\ninputs = { text = \"DocumentText\" }\noutput = \"AnalysisResult\"\nmodel = \"llm_for_analysis\"\nprompt = \"Analyze: @text\"\n</code></pre> - Inputs: <code>{ \"text\": \"...\" }</code><p></p> <p>What happens: The API will execute the <code>extract_invoice</code> pipe from your inline code, ignoring the <code>main_pipe</code> setting.</p> <p>API Request: </p><pre><code>{\n  \"pipe_code\": \"extract_invoice\",\n  \"plx_content\": \"domain = \\\"document_processing\\\"...\",\n  \"inputs\": {\n    \"text\": \"INVOICE #123...\"\n  }\n}\n</code></pre><p></p> <p>Use this when: - You have a PLX file with multiple pipes - You want to choose which pipe to execute dynamically - You want flexibility without modifying the PLX content</p>"},{"location":"usage/#inputs-parameter","title":"Inputs Parameter","text":"<p>\ud83d\udcda For comprehensive input format documentation, including all cases and advanced usage patterns, see the Pipelex API Guide: Input Format (PipelineInputs).</p> <p>The <code>inputs</code> parameter must be a JSON object where keys match the concept names in your pipeline.</p>"},{"location":"usage/#basic-example","title":"Basic Example","text":"<pre><code>{\n  \"invoice_text\": \"INVOICE #INV-001\\nAmount: $500\",\n  \"customer_name\": \"Acme Corp\"\n}\n</code></pre>"},{"location":"usage/#using-n8n-expressions","title":"Using n8n Expressions","text":"<p>Pass data from previous nodes:</p> <pre><code>{\n  \"document_text\": \"{{ $json.content }}\",\n  \"file_name\": \"{{ $json.filename }}\",\n  \"timestamp\": \"{{ $now }}\"\n}\n</code></pre>"},{"location":"usage/#from-previous-node","title":"From Previous Node","text":"<pre><code>{\n  \"text\": \"{{ $('HTTP Request').item.json.body }}\",\n  \"metadata\": {\n    \"source\": \"{{ $json.source }}\",\n    \"user\": \"{{ $json.user_id }}\"\n  }\n}\n</code></pre>"},{"location":"usage/#optional-parameters","title":"Optional Parameters","text":""},{"location":"usage/#output-name-output_name","title":"Output Name (<code>output_name</code>)","text":"<p>Specify the name you want to give to the main pipe</p> <p>Example: <code>extracted_data</code></p>"},{"location":"usage/#output-multiplicity-output_multiplicity","title":"Output Multiplicity (<code>output_multiplicity</code>)","text":"<p>Controls whether the pipeline returns a single item or multiple items (array).</p> <p>\ud83d\udcda For comprehensive multiplicity documentation, see Understanding Multiplicity.</p> <p>Example: If your pipeline extracts keywords from text and is configured with <code>output = \"Keyword[]\"</code> in the PLX definition, set <code>output_multiplicity</code> to <code>true</code> to receive an array of all extracted keywords, <code>n</code> for a specific number of items.</p>"},{"location":"usage/#dynamic-output-concept-code-dynamic_output_concept_code","title":"Dynamic Output Concept Code (<code>dynamic_output_concept_code</code>)","text":"<ul> <li><code>dynamic_output_concept_code</code> (string, optional): Override output concept. See more here.</li> </ul>"},{"location":"usage/#learn-more","title":"Learn More","text":"<ul> <li>\ud83d\udcd6 Pipelex API Documentation</li> <li>\ud83d\udcda Pipelex Main Docs</li> <li>\ud83c\udf73 Pipelex Cookbook</li> <li>\ud83d\udcac Discord Community</li> </ul>"}]}